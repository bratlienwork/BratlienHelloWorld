name: hello-world
on: push
jobs:
  my-job-action:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout-step
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build and Run tests
        run: mvn test --batch-mode --fail-at-end
      - name: Publish Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
      - name: Fetch action
        if: success() || failure() # always run even if the previous step fails
        id: pl
        uses: Rishabh510/Path-lister-action@master
        with:
          path: "/home/runner/work/BratlienHelloWorld/BratlienHelloWorld/target/surefire-reports"
          type: ".xml"
    #  - name: Output results
    #    if: success() || failure() # always run even if the previous step fails
    #    run: |
    #      echo $PWD
    #      echo "Found ${{ steps.pl.outputs.path_count }} file(s) with this extension:"
    #      for i in ${{ steps.pl.outputs.paths }}; do
    #      echo $i
    #      done
    #  - name: FileExist
    #    if: success() || failure() # always run even if the previous step fails
    #    run: |
    #      #tree -d
    #      FILE=junit-sample/target/surefire-reports/TEST-sample.junit.CalculateTest.xml
    #      if test -f "$FILE"; then
    #        echo "$FILE exists."
    #      fi
      - name: Read package.json
        if: success() || failure() # always run even if the previous step fails
        id: package
        uses: juliangruber/read-file-action@v1.1.6
        with:
          path: junit-sample/target/surefire-reports/TEST-sample.junit.CalculateTest.xml
      - name: Echo package.json
        if: success() || failure() # always run even if the previous step fails
        #run: echo "${{ steps.package.outputs.content }}"  
        run: cat "${{ steps.package.outputs.content }}"  
     
      - name: send via curl
        if: success() || failure() # always run even if the previous step fails
        run: |
           curl --request POST https://pulse-7-container.qtestnet.com/webhook/53b32c57-368c-4b9b-a4e0-af11389c5438 -d "projectId=106715&testcycle=6335148&result="

      - name: Parser results round1
        if: success() || failure() # always run even if the previous step fails
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: "https://pulse-7-container.qtestnet.com/webhook/53b32c57-368c-4b9b-a4e0-af11389c5438"
          data: '{"projectId": "106715" ,"testcycle": "4077808","result":""}'                  
          # data: "${{ steps.xml2json.outputs.output }}"     
        
      - name: Read XML file
        if: success() || failure() # always run even if the previous step fails
        id: read_file
        uses: andstor/file-reader-action@v1.0.0
        with: 
          path: "junit-sample/target/surefire-reports/TEST-sample.junit.CalculateTest.xml"
       
      #- name: File contents
      #  if: success() || failure() # always run even if the previous step fails
      #  run: |                          
      #    MULTI_LINES_TEXT="this is line one \n
      #                      this is line two \n
      #                      this is line three \n"    
      #
      #    echo "MULTI_LINES_TEXT_ENV_VAR<<EOF" >> $GITHUB_ENV
      #    # here we can place the command that will generate multi-line text
      #    echo $MULTI_LINES_TEXT >> $GITHUB_ENV
      #    echo "EOF" >> $GITHUB_ENV
      #    encod_data=`echo -n $GITHUB_ENV | base64`          
      #    echo "Encoded text is : $encod_data"
          
      - name: Create base64 file
        if: success() || failure() # always run even if the previous step fails
        run: |
          echo "junit-sample/target/surefire-reports/TEST-sample.junit.CalculateTest.xml" >> $GITHUB_ENV
          encod_data=`echo -n $GITHUB_ENV | base64`          
          echo "Encoded text is : $encod_data"
          
      #- name: Using the previously defined environment variable
      #  if: success() || failure() # always run even if the previous step fails
      #  run: |
      #    echo ${{ env.MULTI_LINES_TEXT }}
 
      - name: Parser results
        if: success() || failure() # always run even if the previous step fails
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: "https://pulse-7-container.qtestnet.com/webhook/53b32c57-368c-4b9b-a4e0-af11389c5438"
          data: '{"projectId": "106715" ,"testcycle": "6334424","result": base64 "junit-sample/target/surefire-reports/TEST-sample.junit.CalculateTest.xml"}'
          #data: '{"projectId": "106715" ,"testcycle": "6334424","result":"$myJson"}'        
          #data: '{"projectId": "106715" ,"testcycle": "6334424","result":"${{ steps.read_file.outputs.contents}}"}'         
         # data: "${{ steps.xml2json.outputs.output }}"         
      - name: invoke chatops pulse with json
        if: success() || failure() # always run even if the previous step fails
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: "https://pulse-7-container.qtestnet.com/webhook/f8525ead-f79b-4afb-8873-b374c421fb5c"
          # data: "${{ steps.xml2json.outputs.output }}"
          data: "${{ steps.read_file.outputs.contents }}"
          #ata: 'JSON.stringify("${{ steps.read_file.outputs.contents }}")'
